Function GetDocNumbers(ConfigNum As Integer) As Variant()
'Algorithm to figure out optimal sheet size
    If ConfigNum > 64 Then
        GetDocNumbers = Array(0, 0, 0)
        MsgBox "Too many configurations", vbOKOnly
        End
    End If
    
Dim tens As Integer
Dim remainder As Integer
Dim split As Integer
Dim i As Integer
Dim decimals As Double

tens = (ConfigNum / 10) - 0.4
remainder = ConfigNum Mod 10
    If remainder > 0 Then
        split = (remainder / tens) - 0.5
        i = remainder Mod tens
    End If
        
    If tens = 1 And remainder <= 4 Then
        GetDocNumbers = Array(1, ConfigNum, 0)
    ElseIf tens = 1 And remainder > 4 Then
        GetDocNumbers = Array(2, (ConfigNum / 2) - 0.5, i)
    ElseIf tens > 1 And i = 0 Then
        GetDocNumbers = Array(tens, 10 + (remainder / tens), i)
    Else
        GetDocNumbers = Array(tens, 10 + split, i)
    End If
    
Debug.Print ("GetDocNumbers Run: Success")
End Function

Function CheckUserInputFF(UserInput As Variant) As Integer

Dim Reply As Integer

    If UserInput = "" Then
        Debug.Print ("User Input = Nothing")
        Debug.Print ("Check Fail")
        Reply = MsgBox("Input positive, whole numbers only", vbRetryCancel, "Don't Break the Macro!")
            If Reply = 2 Then
                Debug.Print ("User Exits")
                Debug.Print ("*****END*****")
                End
            Else
                Debug.Print ("User Input: Retry")
                CheckUserInputFF = 0
            End If
    ElseIf IsNumeric(UserInput) = False Or UserInput <= 0 Then
        Debug.Print ("User Input = Nothing")
        Debug.Print ("Check Fail")
        Reply = MsgBox("Input positive, whole numbers only", vbRetryCancel, "Don't Break the Macro!")
            If Reply = 2 Then
                Debug.Print ("User Exits")
                Debug.Print ("*****END*****")
                End
            Else
                Debug.Print ("User Input: Retry")
                CheckUserInputFF = 0
            End If
    Else
        CheckUserInputFF = UserInput
        Debug.Print ("User Input = " & UserInput)
        Debug.Print ("Check Pass")
    End If
    
End Function

Function EdgeBreakCheck()
Debug.Print ("****EdgeBreakCheck Function Start****")

Dim swApp As SldWorks.SldWorks
Dim swModel As SldWorks.ModelDoc2
Set swApp = Application.SldWorks
Set swModel = swApp.ActiveDoc

'Basic Setup
Dim BreaksCurrent As String
Debug.Print ("Setup: Success")

'Getting Edge Break Value
Dim UserInput As String
UserInput = InputBox("Enter Value range for Edge Breaks(Ex: .005 - .015)", "Edge Break Value")
Debug.Print ("User Input = " & UserInput)

'Getting configuration Names into an array
Dim ConfigNames() As String
ConfigNames = swModel.GetConfigurationNames
Debug.Print ("ConfigNames Array Populated: Success")

'Looping through configs to add Edge Break info
Dim i As Integer
Debug.Print ("****Loop Start****")
For i = 0 To UBound(ConfigNames) 'This doesn't have exceptions I need to add those
    Debug.Print ("Loop #: " & i + 1 & " (i= " & i & ")")
    Debug.Print ("Configuration: " & ConfigNames(i))
    BreaksCurrent = swModel.GetCustomInfoValue(ConfigNames(i), "Breaks")
    Debug.Print ("Current Breaks Value: " & BreaksCurrent)
    
    If BreaksCurrent = "N/A" Or BreaksCurrent = "NA" Then
        swModel.CustomInfo2(ConfigNames(i), "Breaks") = "N/A"
        Debug.Print ("Edge Breaks Set to: N/A")
    Else
        swModel.CustomInfo2(ConfigNames(i), "Breaks") = UserInput
        Debug.Print ("Edge Breaks Set to: " & UserInput)
    End If
    
Next i

Debug.Print ("****EdgeBreakCheck Function End****")
EdgeBreakCheck = True
End Function

Function NameThatSheet(ConfigName As String) As String 'Function to Check for "(" in config names
Debug.Print ("*****NameThatSheet Start*****")
Dim CharCheck() As String
Dim CharNum As Integer
Dim i As Integer
Dim NameLength
Dim bool As Boolean
'Find Character Number and redim the array to match
CharNum = Len(ConfigName)
ReDim CharCheck(CharNum - 1)

'Break the string down into an array of characters and check them for "(" then find when the ")" comes
For i = 0 To CharNum - 1
    CharCheck(i) = Mid$(ConfigName, i + 1, 1)
    If CharCheck(i) = "(" Then
        bool = True
    ElseIf CharCheck(i) = ")" Then
        NameLength = i + 1
    End If
Next i

'Check to see if there is an open paren. If not then name sheet as normal
If bool = True Then
    NameThatSheet = Left(ConfigName, NameLength)
Else
    NameThatSheet = Left(ConfigName, 3)
End If

Debug.Print ("Name of Sheet: " & NameThatSheet)
End Function

Function BlockInputCheck(ConfigName As String)
Dim i As Integer
Dim SeqType As String
'Check for names and add blocks
'How do we store these names? Do I add a code?
'Check for specific properties?

End Function

Function RevABlockInsert()
Dim swApp As SldWorks.SldWorks
Dim swModel As SldWorks.ModelDoc2
Dim swDraw As SldWorks.DrawingDoc
Dim swView As SldWorks.View
Dim swSheet As SldWorks.Sheet

Dim vSheetProperties As Variant

Dim scale1 As Double
Dim scale2 As Double

Dim Point As SldWorks.MathPoint
Dim myUtil As SldWorks.MathUtility
Debug.Print (vbCrLf & "******RevAMacroStart******")

'***Setup***
Set swApp = Application.SldWorks
Set swModel = swApp.ActiveDoc
Set swDraw = swApp.ActiveDoc

'Get MathUtilities for 3D points
Set myUtil = swApp.GetMathUtility

'Define Coordinates for the block
Dim Coords(2) As Double
Dim BlockPath As String
BlockPath = "Y:\Engineering Technical Library\03_Logistics\01_CAD Tools\01_SolidWorks\01_Blocks\01_Setup Blocks (Chucks, Part Notes)\A INITIAL RELEASE.SLDBLK"

'Sheet Names Array created
Dim SheetNames() As String
Dim SheetNum As Integer
SheetNum = swDraw.GetSheetCount
ReDim SheetNames(SheetNum)
SheetNames = swDraw.GetSheetNames()

Debug.Print ("Sheet Names Array Populated: Success")
Debug.Print ("Array size: " & UBound(SheetNames))

'***Loop to run through pages adding the block***
Debug.Print ("******FOR LOOP START******")
For i = 1 To swDraw.GetSheetCount
    
    'Activate Sheet
    swDraw.ActivateSheet (SheetNames(i - 1))

    'Getting sheet info
    Set swSheet = swDraw.Sheet(SheetNames(i - 1))
    vSheetProperties = swSheet.GetProperties
    scale1 = vSheetProperties(2)
    scale2 = vSheetProperties(3)
      
    'Define Coordinates for the block
    Coords(0) = 0.2198 * (scale2 / scale1)  'X
    Coords(1) = 0.20177 * (scale2 / scale1)  'Y
    Coords(2) = 0                            'Z
    
    'Point given definition
    Set Point = myUtil.CreatePoint(Coords)
    
    'Add Block to Sheet
    Dim myBlockDefinition As SketchBlockDefinition
    Set myBlockDefinition = swModel.SketchManager.MakeSketchBlockFromFile(Point, BlockPath, False, 0.666666666666667, 0)
    
Next i

'Go back to first page
swDraw.ActivateSheet SheetNames(0)

End Function
