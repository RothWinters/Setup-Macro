Function GetDocNumbers(ConfigNum As Integer) As Variant()
'Algorithm to figure out optimal sheet size
    If ConfigNum > 64 Then
        GetDocNumbers = Array(0, 0, 0)
        MsgBox "Too many configurations", vbOKOnly
        End
    End If
    
Dim tens As Integer
Dim remainder As Integer
Dim split As Integer
Dim i As Integer
Dim decimals As Double

tens = (ConfigNum / 10) - 0.4
remainder = ConfigNum Mod 10
    If remainder > 0 Then
        split = (remainder / tens) - 0.5
        i = remainder Mod tens
    End If
        
    If tens = 1 And remainder <= 4 Then
        GetDocNumbers = Array(1, ConfigNum, 0)
    ElseIf tens = 1 And remainder > 4 Then
        GetDocNumbers = Array(2, (ConfigNum / 2) - 0.5, i)
    ElseIf tens > 1 And i = 0 Then
        GetDocNumbers = Array(tens, 10 + (remainder / tens), i)
    Else
        GetDocNumbers = Array(tens, 10 + split, i)
    End If
    
Debug.Print ("GetDocNumbers Run: Success")
End Function

Function CheckUserInputFF(UserInput As Variant) As Integer

Dim Reply As Integer

    If UserInput = "" Then
        Debug.Print ("User Input = Nothing")
        Debug.Print ("Check Fail")
        Reply = MsgBox("Input positive, whole numbers only", vbRetryCancel, "Don't Break the Macro!")
            If Reply = 2 Then
                Debug.Print ("User Exits")
                Debug.Print ("*****END*****")
                End
            Else
                Debug.Print ("User Input: Retry")
                CheckUserInputFF = 0
            End If
    ElseIf IsNumeric(UserInput) = False Or UserInput <= 0 Then
        Debug.Print ("User Input = Nothing")
        Debug.Print ("Check Fail")
        Reply = MsgBox("Input positive, whole numbers only", vbRetryCancel, "Don't Break the Macro!")
            If Reply = 2 Then
                Debug.Print ("User Exits")
                Debug.Print ("*****END*****")
                End
            Else
                Debug.Print ("User Input: Retry")
                CheckUserInputFF = 0
            End If
    Else
        CheckUserInputFF = UserInput
        Debug.Print ("User Input = " & UserInput)
        Debug.Print ("Check Pass")
    End If
    
End Function

Function EdgeBreakCheck()
Debug.Print ("****EdgeBreakCheck Function Start****")

Dim swApp As SldWorks.SldWorks
Dim swModel As SldWorks.ModelDoc2
Set swApp = Application.SldWorks
Set swModel = swApp.ActiveDoc

'Basic Setup
Dim BreaksCurrent As String
Debug.Print ("Setup: Success")

'Getting Edge Break Value
Dim UserInput As String
UserInput = InputBox("Enter Value range for Edge Breaks(Ex: .005 - .015)", "Edge Break Value")
Debug.Print ("User Input = " & UserInput)

'Getting configuration Names into an array
Dim ConfigNames() As String
ConfigNames = swModel.GetConfigurationNames
Debug.Print ("ConfigNames Array Populated: Success")

'Looping through configs to add Edge Break info
Dim i As Integer
Debug.Print ("****Loop Start****")
For i = 0 To UBound(ConfigNames) 'This doesn't have exceptions I need to add those
    Debug.Print ("Loop #: " & i + 1 & " (i= " & i & ")")
    Debug.Print ("Configuration: " & ConfigNames(i))
    BreaksCurrent = swModel.GetCustomInfoValue(ConfigNames(i), "Breaks")
    Debug.Print ("Current Breaks Value: " & BreaksCurrent)
    
    If BreaksCurrent = "N/A" Or BreaksCurrent = "NA" Then
        swModel.CustomInfo2(ConfigNames(i), "Breaks") = "N/A"
        Debug.Print ("Edge Breaks Set to: N/A")
    Else
        swModel.CustomInfo2(ConfigNames(i), "Breaks") = UserInput
        Debug.Print ("Edge Breaks Set to: " & UserInput)
    End If
    
Next i

Debug.Print ("****EdgeBreakCheck Function End****")
EdgeBreakCheck = True
End Function

Function NameThatSheet(ConfigName As String) As String 'Function to Check for "(" in config names
Debug.Print ("*****NameThatSheet Start*****")
Dim CharCheck() As String
Dim CharNum As Integer
Dim i As Integer
Dim NameLength
Dim bool As Boolean
'Find Character Number and redim the array to match
CharNum = Len(ConfigName)
ReDim CharCheck(CharNum - 1)

'Break the string down into an array of characters and check them for "(" then find when the ")" comes
For i = 0 To CharNum - 1
    CharCheck(i) = Mid$(ConfigName, i + 1, 1)
    If CharCheck(i) = "(" Then
        bool = True
    ElseIf CharCheck(i) = ")" Then
        NameLength = i + 1
    End If
Next i

'Check to see if there is an open paren. If not then name sheet as normal
If bool = True Then
    NameThatSheet = Left(ConfigName, NameLength)
Else
    NameThatSheet = Left(ConfigName, 3)
End If

Debug.Print ("Name of Sheet: " & NameThatSheet)
End Function
